# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20014Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'insecure_value': 'int',
        'uncertain_value': 'int',
        'evasive_value': 'int',
        'operationalrisk_value': 'int',
        'overallrisk_value': 'int',
        'financialrisk_value': 'int',
        'speculative_value': 'int',
        'constrained_value': 'int',
        'earningsrisk_value': 'int',
        'economicrisk_value': 'int'
    }

    attribute_map = {
        'insecure_value': 'INSECURE-VALUE',
        'uncertain_value': 'UNCERTAIN-VALUE',
        'evasive_value': 'EVASIVE-VALUE',
        'operationalrisk_value': 'OPERATIONALRISK-VALUE',
        'overallrisk_value': 'OVERALLRISK-VALUE',
        'financialrisk_value': 'FINANCIALRISK-VALUE',
        'speculative_value': 'SPECULATIVE-VALUE',
        'constrained_value': 'CONSTRAINED-VALUE',
        'earningsrisk_value': 'EARNINGSRISK-VALUE',
        'economicrisk_value': 'ECONOMICRISK-VALUE'
    }

    def __init__(self, insecure_value=None, uncertain_value=None, evasive_value=None, operationalrisk_value=None, overallrisk_value=None, financialrisk_value=None, speculative_value=None, constrained_value=None, earningsrisk_value=None, economicrisk_value=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20014Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._insecure_value = None
        self._uncertain_value = None
        self._evasive_value = None
        self._operationalrisk_value = None
        self._overallrisk_value = None
        self._financialrisk_value = None
        self._speculative_value = None
        self._constrained_value = None
        self._earningsrisk_value = None
        self._economicrisk_value = None
        self.discriminator = None

        self.insecure_value = insecure_value
        self.uncertain_value = uncertain_value
        self.evasive_value = evasive_value
        self.operationalrisk_value = operationalrisk_value
        self.overallrisk_value = overallrisk_value
        self.financialrisk_value = financialrisk_value
        self.speculative_value = speculative_value
        self.constrained_value = constrained_value
        self.earningsrisk_value = earningsrisk_value
        self.economicrisk_value = economicrisk_value

    @property
    def insecure_value(self):
        """Gets the insecure_value of this InlineResponse20014Data.  # noqa: E501


        :return: The insecure_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._insecure_value

    @insecure_value.setter
    def insecure_value(self, insecure_value):
        """Sets the insecure_value of this InlineResponse20014Data.


        :param insecure_value: The insecure_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and insecure_value is None:  # noqa: E501
            raise ValueError("Invalid value for `insecure_value`, must not be `None`")  # noqa: E501

        self._insecure_value = insecure_value

    @property
    def uncertain_value(self):
        """Gets the uncertain_value of this InlineResponse20014Data.  # noqa: E501


        :return: The uncertain_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._uncertain_value

    @uncertain_value.setter
    def uncertain_value(self, uncertain_value):
        """Sets the uncertain_value of this InlineResponse20014Data.


        :param uncertain_value: The uncertain_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and uncertain_value is None:  # noqa: E501
            raise ValueError("Invalid value for `uncertain_value`, must not be `None`")  # noqa: E501

        self._uncertain_value = uncertain_value

    @property
    def evasive_value(self):
        """Gets the evasive_value of this InlineResponse20014Data.  # noqa: E501


        :return: The evasive_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._evasive_value

    @evasive_value.setter
    def evasive_value(self, evasive_value):
        """Sets the evasive_value of this InlineResponse20014Data.


        :param evasive_value: The evasive_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and evasive_value is None:  # noqa: E501
            raise ValueError("Invalid value for `evasive_value`, must not be `None`")  # noqa: E501

        self._evasive_value = evasive_value

    @property
    def operationalrisk_value(self):
        """Gets the operationalrisk_value of this InlineResponse20014Data.  # noqa: E501


        :return: The operationalrisk_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._operationalrisk_value

    @operationalrisk_value.setter
    def operationalrisk_value(self, operationalrisk_value):
        """Sets the operationalrisk_value of this InlineResponse20014Data.


        :param operationalrisk_value: The operationalrisk_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and operationalrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `operationalrisk_value`, must not be `None`")  # noqa: E501

        self._operationalrisk_value = operationalrisk_value

    @property
    def overallrisk_value(self):
        """Gets the overallrisk_value of this InlineResponse20014Data.  # noqa: E501


        :return: The overallrisk_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._overallrisk_value

    @overallrisk_value.setter
    def overallrisk_value(self, overallrisk_value):
        """Sets the overallrisk_value of this InlineResponse20014Data.


        :param overallrisk_value: The overallrisk_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and overallrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `overallrisk_value`, must not be `None`")  # noqa: E501

        self._overallrisk_value = overallrisk_value

    @property
    def financialrisk_value(self):
        """Gets the financialrisk_value of this InlineResponse20014Data.  # noqa: E501


        :return: The financialrisk_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._financialrisk_value

    @financialrisk_value.setter
    def financialrisk_value(self, financialrisk_value):
        """Sets the financialrisk_value of this InlineResponse20014Data.


        :param financialrisk_value: The financialrisk_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and financialrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `financialrisk_value`, must not be `None`")  # noqa: E501

        self._financialrisk_value = financialrisk_value

    @property
    def speculative_value(self):
        """Gets the speculative_value of this InlineResponse20014Data.  # noqa: E501


        :return: The speculative_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._speculative_value

    @speculative_value.setter
    def speculative_value(self, speculative_value):
        """Sets the speculative_value of this InlineResponse20014Data.


        :param speculative_value: The speculative_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and speculative_value is None:  # noqa: E501
            raise ValueError("Invalid value for `speculative_value`, must not be `None`")  # noqa: E501

        self._speculative_value = speculative_value

    @property
    def constrained_value(self):
        """Gets the constrained_value of this InlineResponse20014Data.  # noqa: E501


        :return: The constrained_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._constrained_value

    @constrained_value.setter
    def constrained_value(self, constrained_value):
        """Sets the constrained_value of this InlineResponse20014Data.


        :param constrained_value: The constrained_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and constrained_value is None:  # noqa: E501
            raise ValueError("Invalid value for `constrained_value`, must not be `None`")  # noqa: E501

        self._constrained_value = constrained_value

    @property
    def earningsrisk_value(self):
        """Gets the earningsrisk_value of this InlineResponse20014Data.  # noqa: E501


        :return: The earningsrisk_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._earningsrisk_value

    @earningsrisk_value.setter
    def earningsrisk_value(self, earningsrisk_value):
        """Sets the earningsrisk_value of this InlineResponse20014Data.


        :param earningsrisk_value: The earningsrisk_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and earningsrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `earningsrisk_value`, must not be `None`")  # noqa: E501

        self._earningsrisk_value = earningsrisk_value

    @property
    def economicrisk_value(self):
        """Gets the economicrisk_value of this InlineResponse20014Data.  # noqa: E501


        :return: The economicrisk_value of this InlineResponse20014Data.  # noqa: E501
        :rtype: int
        """
        return self._economicrisk_value

    @economicrisk_value.setter
    def economicrisk_value(self, economicrisk_value):
        """Sets the economicrisk_value of this InlineResponse20014Data.


        :param economicrisk_value: The economicrisk_value of this InlineResponse20014Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and economicrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `economicrisk_value`, must not be `None`")  # noqa: E501

        self._economicrisk_value = economicrisk_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20014Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20014Data):
            return True

        return self.to_dict() != other.to_dict()
