# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20012Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'financials': 'list[InlineResponse20012Financials]',
        'food': 'list[InlineResponse20012Food]',
        'healthcare': 'list[InlineResponse20012Healthcare]',
        'information': 'list[InlineResponse20012Information]',
        'energy': 'list[InlineResponse20012Energy]',
        'industrials': 'list[InlineResponse20012Industrials]',
        'information_tools': 'list[InlineResponse20012InformationTools]',
        'consumer_products_and_services': 'list[InlineResponse20012ConsumerProductsAndServices]'
    }

    attribute_map = {
        'financials': 'Financials',
        'food': 'Food',
        'healthcare': 'Healthcare',
        'information': 'Information',
        'energy': 'Energy',
        'industrials': 'Industrials',
        'information_tools': 'Information Tools',
        'consumer_products_and_services': 'Consumer Products and Services'
    }

    def __init__(self, financials=None, food=None, healthcare=None, information=None, energy=None, industrials=None, information_tools=None, consumer_products_and_services=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20012Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._financials = None
        self._food = None
        self._healthcare = None
        self._information = None
        self._energy = None
        self._industrials = None
        self._information_tools = None
        self._consumer_products_and_services = None
        self.discriminator = None

        if financials is not None:
            self.financials = financials
        if food is not None:
            self.food = food
        if healthcare is not None:
            self.healthcare = healthcare
        if information is not None:
            self.information = information
        if energy is not None:
            self.energy = energy
        if industrials is not None:
            self.industrials = industrials
        if information_tools is not None:
            self.information_tools = information_tools
        if consumer_products_and_services is not None:
            self.consumer_products_and_services = consumer_products_and_services

    @property
    def financials(self):
        """Gets the financials of this InlineResponse20012Data.  # noqa: E501


        :return: The financials of this InlineResponse20012Data.  # noqa: E501
        :rtype: list[InlineResponse20012Financials]
        """
        return self._financials

    @financials.setter
    def financials(self, financials):
        """Sets the financials of this InlineResponse20012Data.


        :param financials: The financials of this InlineResponse20012Data.  # noqa: E501
        :type: list[InlineResponse20012Financials]
        """

        self._financials = financials

    @property
    def food(self):
        """Gets the food of this InlineResponse20012Data.  # noqa: E501


        :return: The food of this InlineResponse20012Data.  # noqa: E501
        :rtype: list[InlineResponse20012Food]
        """
        return self._food

    @food.setter
    def food(self, food):
        """Sets the food of this InlineResponse20012Data.


        :param food: The food of this InlineResponse20012Data.  # noqa: E501
        :type: list[InlineResponse20012Food]
        """

        self._food = food

    @property
    def healthcare(self):
        """Gets the healthcare of this InlineResponse20012Data.  # noqa: E501


        :return: The healthcare of this InlineResponse20012Data.  # noqa: E501
        :rtype: list[InlineResponse20012Healthcare]
        """
        return self._healthcare

    @healthcare.setter
    def healthcare(self, healthcare):
        """Sets the healthcare of this InlineResponse20012Data.


        :param healthcare: The healthcare of this InlineResponse20012Data.  # noqa: E501
        :type: list[InlineResponse20012Healthcare]
        """

        self._healthcare = healthcare

    @property
    def information(self):
        """Gets the information of this InlineResponse20012Data.  # noqa: E501


        :return: The information of this InlineResponse20012Data.  # noqa: E501
        :rtype: list[InlineResponse20012Information]
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this InlineResponse20012Data.


        :param information: The information of this InlineResponse20012Data.  # noqa: E501
        :type: list[InlineResponse20012Information]
        """

        self._information = information

    @property
    def energy(self):
        """Gets the energy of this InlineResponse20012Data.  # noqa: E501


        :return: The energy of this InlineResponse20012Data.  # noqa: E501
        :rtype: list[InlineResponse20012Energy]
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this InlineResponse20012Data.


        :param energy: The energy of this InlineResponse20012Data.  # noqa: E501
        :type: list[InlineResponse20012Energy]
        """

        self._energy = energy

    @property
    def industrials(self):
        """Gets the industrials of this InlineResponse20012Data.  # noqa: E501


        :return: The industrials of this InlineResponse20012Data.  # noqa: E501
        :rtype: list[InlineResponse20012Industrials]
        """
        return self._industrials

    @industrials.setter
    def industrials(self, industrials):
        """Sets the industrials of this InlineResponse20012Data.


        :param industrials: The industrials of this InlineResponse20012Data.  # noqa: E501
        :type: list[InlineResponse20012Industrials]
        """

        self._industrials = industrials

    @property
    def information_tools(self):
        """Gets the information_tools of this InlineResponse20012Data.  # noqa: E501


        :return: The information_tools of this InlineResponse20012Data.  # noqa: E501
        :rtype: list[InlineResponse20012InformationTools]
        """
        return self._information_tools

    @information_tools.setter
    def information_tools(self, information_tools):
        """Sets the information_tools of this InlineResponse20012Data.


        :param information_tools: The information_tools of this InlineResponse20012Data.  # noqa: E501
        :type: list[InlineResponse20012InformationTools]
        """

        self._information_tools = information_tools

    @property
    def consumer_products_and_services(self):
        """Gets the consumer_products_and_services of this InlineResponse20012Data.  # noqa: E501


        :return: The consumer_products_and_services of this InlineResponse20012Data.  # noqa: E501
        :rtype: list[InlineResponse20012ConsumerProductsAndServices]
        """
        return self._consumer_products_and_services

    @consumer_products_and_services.setter
    def consumer_products_and_services(self, consumer_products_and_services):
        """Sets the consumer_products_and_services of this InlineResponse20012Data.


        :param consumer_products_and_services: The consumer_products_and_services of this InlineResponse20012Data.  # noqa: E501
        :type: list[InlineResponse20012ConsumerProductsAndServices]
        """

        self._consumer_products_and_services = consumer_products_and_services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20012Data):
            return True

        return self.to_dict() != other.to_dict()
