# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20012Information(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'commercial_information_services': 'list[str]',
        'internet_services_and_websites': 'list[str]',
        'media_and_telecommunications': 'list[str]'
    }

    attribute_map = {
        'commercial_information_services': 'Commercial Information Services',
        'internet_services_and_websites': 'Internet Services and Websites',
        'media_and_telecommunications': 'Media and Telecommunications'
    }

    def __init__(self, commercial_information_services=None, internet_services_and_websites=None, media_and_telecommunications=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20012Information - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._commercial_information_services = None
        self._internet_services_and_websites = None
        self._media_and_telecommunications = None
        self.discriminator = None

        if commercial_information_services is not None:
            self.commercial_information_services = commercial_information_services
        if internet_services_and_websites is not None:
            self.internet_services_and_websites = internet_services_and_websites
        if media_and_telecommunications is not None:
            self.media_and_telecommunications = media_and_telecommunications

    @property
    def commercial_information_services(self):
        """Gets the commercial_information_services of this InlineResponse20012Information.  # noqa: E501


        :return: The commercial_information_services of this InlineResponse20012Information.  # noqa: E501
        :rtype: list[str]
        """
        return self._commercial_information_services

    @commercial_information_services.setter
    def commercial_information_services(self, commercial_information_services):
        """Sets the commercial_information_services of this InlineResponse20012Information.


        :param commercial_information_services: The commercial_information_services of this InlineResponse20012Information.  # noqa: E501
        :type: list[str]
        """

        self._commercial_information_services = commercial_information_services

    @property
    def internet_services_and_websites(self):
        """Gets the internet_services_and_websites of this InlineResponse20012Information.  # noqa: E501


        :return: The internet_services_and_websites of this InlineResponse20012Information.  # noqa: E501
        :rtype: list[str]
        """
        return self._internet_services_and_websites

    @internet_services_and_websites.setter
    def internet_services_and_websites(self, internet_services_and_websites):
        """Sets the internet_services_and_websites of this InlineResponse20012Information.


        :param internet_services_and_websites: The internet_services_and_websites of this InlineResponse20012Information.  # noqa: E501
        :type: list[str]
        """

        self._internet_services_and_websites = internet_services_and_websites

    @property
    def media_and_telecommunications(self):
        """Gets the media_and_telecommunications of this InlineResponse20012Information.  # noqa: E501


        :return: The media_and_telecommunications of this InlineResponse20012Information.  # noqa: E501
        :rtype: list[str]
        """
        return self._media_and_telecommunications

    @media_and_telecommunications.setter
    def media_and_telecommunications(self, media_and_telecommunications):
        """Sets the media_and_telecommunications of this InlineResponse20012Information.


        :param media_and_telecommunications: The media_and_telecommunications of this InlineResponse20012Information.  # noqa: E501
        :type: list[str]
        """

        self._media_and_telecommunications = media_and_telecommunications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012Information):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20012Information):
            return True

        return self.to_dict() != other.to_dict()
