# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse20016Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company1': 'InlineResponse20016Company1',
        'company2': 'object',
        'company3': 'InlineResponse20016Company1'
    }

    attribute_map = {
        'company1': 'company1',
        'company2': 'company2',
        'company3': 'company3'
    }

    def __init__(self, company1=None, company2=None, company3=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20016Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._company1 = None
        self._company2 = None
        self._company3 = None
        self.discriminator = None

        if company1 is not None:
            self.company1 = company1
        if company2 is not None:
            self.company2 = company2
        if company3 is not None:
            self.company3 = company3

    @property
    def company1(self):
        """Gets the company1 of this InlineResponse20016Data.  # noqa: E501


        :return: The company1 of this InlineResponse20016Data.  # noqa: E501
        :rtype: InlineResponse20016Company1
        """
        return self._company1

    @company1.setter
    def company1(self, company1):
        """Sets the company1 of this InlineResponse20016Data.


        :param company1: The company1 of this InlineResponse20016Data.  # noqa: E501
        :type: InlineResponse20016Company1
        """

        self._company1 = company1

    @property
    def company2(self):
        """Gets the company2 of this InlineResponse20016Data.  # noqa: E501


        :return: The company2 of this InlineResponse20016Data.  # noqa: E501
        :rtype: object
        """
        return self._company2

    @company2.setter
    def company2(self, company2):
        """Sets the company2 of this InlineResponse20016Data.


        :param company2: The company2 of this InlineResponse20016Data.  # noqa: E501
        :type: object
        """

        self._company2 = company2

    @property
    def company3(self):
        """Gets the company3 of this InlineResponse20016Data.  # noqa: E501


        :return: The company3 of this InlineResponse20016Data.  # noqa: E501
        :rtype: InlineResponse20016Company1
        """
        return self._company3

    @company3.setter
    def company3(self, company3):
        """Sets the company3 of this InlineResponse20016Data.


        :param company3: The company3 of this InlineResponse20016Data.  # noqa: E501
        :type: InlineResponse20016Company1
        """

        self._company3 = company3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20016Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20016Data):
            return True

        return self.to_dict() != other.to_dict()
