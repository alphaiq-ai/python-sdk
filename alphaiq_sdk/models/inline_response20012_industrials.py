# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from alphaiq_sdk.configuration import Configuration


class InlineResponse20012Industrials(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'industrial_components': 'list[str]',
        'industrial_equipment': 'list[str]',
        'industrial_materials': 'list[str]',
        'industrial_services': 'list[str]'
    }

    attribute_map = {
        'industrial_components': 'Industrial Components',
        'industrial_equipment': 'Industrial Equipment',
        'industrial_materials': 'Industrial Materials',
        'industrial_services': 'Industrial Services'
    }

    def __init__(self, industrial_components=None, industrial_equipment=None, industrial_materials=None, industrial_services=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20012Industrials - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._industrial_components = None
        self._industrial_equipment = None
        self._industrial_materials = None
        self._industrial_services = None
        self.discriminator = None

        if industrial_components is not None:
            self.industrial_components = industrial_components
        if industrial_equipment is not None:
            self.industrial_equipment = industrial_equipment
        if industrial_materials is not None:
            self.industrial_materials = industrial_materials
        if industrial_services is not None:
            self.industrial_services = industrial_services

    @property
    def industrial_components(self):
        """Gets the industrial_components of this InlineResponse20012Industrials.  # noqa: E501


        :return: The industrial_components of this InlineResponse20012Industrials.  # noqa: E501
        :rtype: list[str]
        """
        return self._industrial_components

    @industrial_components.setter
    def industrial_components(self, industrial_components):
        """Sets the industrial_components of this InlineResponse20012Industrials.


        :param industrial_components: The industrial_components of this InlineResponse20012Industrials.  # noqa: E501
        :type: list[str]
        """

        self._industrial_components = industrial_components

    @property
    def industrial_equipment(self):
        """Gets the industrial_equipment of this InlineResponse20012Industrials.  # noqa: E501


        :return: The industrial_equipment of this InlineResponse20012Industrials.  # noqa: E501
        :rtype: list[str]
        """
        return self._industrial_equipment

    @industrial_equipment.setter
    def industrial_equipment(self, industrial_equipment):
        """Sets the industrial_equipment of this InlineResponse20012Industrials.


        :param industrial_equipment: The industrial_equipment of this InlineResponse20012Industrials.  # noqa: E501
        :type: list[str]
        """

        self._industrial_equipment = industrial_equipment

    @property
    def industrial_materials(self):
        """Gets the industrial_materials of this InlineResponse20012Industrials.  # noqa: E501


        :return: The industrial_materials of this InlineResponse20012Industrials.  # noqa: E501
        :rtype: list[str]
        """
        return self._industrial_materials

    @industrial_materials.setter
    def industrial_materials(self, industrial_materials):
        """Sets the industrial_materials of this InlineResponse20012Industrials.


        :param industrial_materials: The industrial_materials of this InlineResponse20012Industrials.  # noqa: E501
        :type: list[str]
        """

        self._industrial_materials = industrial_materials

    @property
    def industrial_services(self):
        """Gets the industrial_services of this InlineResponse20012Industrials.  # noqa: E501


        :return: The industrial_services of this InlineResponse20012Industrials.  # noqa: E501
        :rtype: list[str]
        """
        return self._industrial_services

    @industrial_services.setter
    def industrial_services(self, industrial_services):
        """Sets the industrial_services of this InlineResponse20012Industrials.


        :param industrial_services: The industrial_services of this InlineResponse20012Industrials.  # noqa: E501
        :type: list[str]
        """

        self._industrial_services = industrial_services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012Industrials):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20012Industrials):
            return True

        return self.to_dict() != other.to_dict()
