# coding: utf-8

"""
    AlphaIQ API

    Quantitative Linguistics is the Future of Investment Research

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ModelsSpindexSpindexModelInner(BaseModel):
    """
    ModelsSpindexSpindexModelInner
    """ # noqa: E501
    var_date: StrictStr = Field(alias="date")
    overall_risk: StrictInt
    overall_risk_change: StrictInt
    overall_risk_wh: StrictInt
    overall_risk_roc: StrictInt
    overall_risk_mr: StrictInt
    evasive: StrictInt
    uncertain: StrictInt
    speculative: StrictInt
    constrained: StrictInt
    insecure: StrictInt
    economic_risk: StrictInt
    financial_risk: StrictInt
    earnings_risk: StrictInt
    operational_risk: StrictInt
    __properties: ClassVar[List[str]] = ["date", "overall_risk", "overall_risk_change", "overall_risk_wh", "overall_risk_roc", "overall_risk_mr", "evasive", "uncertain", "speculative", "constrained", "insecure", "economic_risk", "financial_risk", "earnings_risk", "operational_risk"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsSpindexSpindexModelInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsSpindexSpindexModelInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "overall_risk": obj.get("overall_risk"),
            "overall_risk_change": obj.get("overall_risk_change"),
            "overall_risk_wh": obj.get("overall_risk_wh"),
            "overall_risk_roc": obj.get("overall_risk_roc"),
            "overall_risk_mr": obj.get("overall_risk_mr"),
            "evasive": obj.get("evasive"),
            "uncertain": obj.get("uncertain"),
            "speculative": obj.get("speculative"),
            "constrained": obj.get("constrained"),
            "insecure": obj.get("insecure"),
            "economic_risk": obj.get("economic_risk"),
            "financial_risk": obj.get("financial_risk"),
            "earnings_risk": obj.get("earnings_risk"),
            "operational_risk": obj.get("operational_risk")
        })
        return _obj


