# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from alphaiq_sdk.configuration import Configuration


class InlineResponse20012InformationTools(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'integrated_circuits': 'list[str]',
        'it_hardware': 'list[str]',
        'software': 'list[str]'
    }

    attribute_map = {
        'integrated_circuits': 'Integrated Circuits',
        'it_hardware': 'IT Hardware',
        'software': 'Software'
    }

    def __init__(self, integrated_circuits=None, it_hardware=None, software=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20012InformationTools - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._integrated_circuits = None
        self._it_hardware = None
        self._software = None
        self.discriminator = None

        if integrated_circuits is not None:
            self.integrated_circuits = integrated_circuits
        if it_hardware is not None:
            self.it_hardware = it_hardware
        if software is not None:
            self.software = software

    @property
    def integrated_circuits(self):
        """Gets the integrated_circuits of this InlineResponse20012InformationTools.  # noqa: E501


        :return: The integrated_circuits of this InlineResponse20012InformationTools.  # noqa: E501
        :rtype: list[str]
        """
        return self._integrated_circuits

    @integrated_circuits.setter
    def integrated_circuits(self, integrated_circuits):
        """Sets the integrated_circuits of this InlineResponse20012InformationTools.


        :param integrated_circuits: The integrated_circuits of this InlineResponse20012InformationTools.  # noqa: E501
        :type: list[str]
        """

        self._integrated_circuits = integrated_circuits

    @property
    def it_hardware(self):
        """Gets the it_hardware of this InlineResponse20012InformationTools.  # noqa: E501


        :return: The it_hardware of this InlineResponse20012InformationTools.  # noqa: E501
        :rtype: list[str]
        """
        return self._it_hardware

    @it_hardware.setter
    def it_hardware(self, it_hardware):
        """Sets the it_hardware of this InlineResponse20012InformationTools.


        :param it_hardware: The it_hardware of this InlineResponse20012InformationTools.  # noqa: E501
        :type: list[str]
        """

        self._it_hardware = it_hardware

    @property
    def software(self):
        """Gets the software of this InlineResponse20012InformationTools.  # noqa: E501


        :return: The software of this InlineResponse20012InformationTools.  # noqa: E501
        :rtype: list[str]
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this InlineResponse20012InformationTools.


        :param software: The software of this InlineResponse20012InformationTools.  # noqa: E501
        :type: list[str]
        """

        self._software = software

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012InformationTools):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20012InformationTools):
            return True

        return self.to_dict() != other.to_dict()
