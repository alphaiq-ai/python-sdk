# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from alphaiq_sdk.configuration import Configuration


class InlineResponse20025DataCompassContent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'compass_title': 'str',
        'compass_asof_date': 'str',
        'executive_summary': 'str',
        'trending_up_article': 'str',
        'trending_up_topics': 'str',
        'popularity_article': 'str',
        'popularity_topics': 'str',
        'trending_down_article': 'str',
        'trending_down_topics': 'str'
    }

    attribute_map = {
        'compass_title': 'compass_title',
        'compass_asof_date': 'compass_asof_date',
        'executive_summary': 'executive_summary',
        'trending_up_article': 'trending_up_article',
        'trending_up_topics': 'trending_up_topics',
        'popularity_article': 'popularity_article',
        'popularity_topics': 'popularity_topics',
        'trending_down_article': 'trending_down_article',
        'trending_down_topics': 'trending_down_topics'
    }

    def __init__(self, compass_title=None, compass_asof_date=None, executive_summary=None, trending_up_article=None, trending_up_topics=None, popularity_article=None, popularity_topics=None, trending_down_article=None, trending_down_topics=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20025DataCompassContent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._compass_title = None
        self._compass_asof_date = None
        self._executive_summary = None
        self._trending_up_article = None
        self._trending_up_topics = None
        self._popularity_article = None
        self._popularity_topics = None
        self._trending_down_article = None
        self._trending_down_topics = None
        self.discriminator = None

        self.compass_title = compass_title
        self.compass_asof_date = compass_asof_date
        self.executive_summary = executive_summary
        self.trending_up_article = trending_up_article
        self.trending_up_topics = trending_up_topics
        self.popularity_article = popularity_article
        self.popularity_topics = popularity_topics
        self.trending_down_article = trending_down_article
        self.trending_down_topics = trending_down_topics

    @property
    def compass_title(self):
        """Gets the compass_title of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The compass_title of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._compass_title

    @compass_title.setter
    def compass_title(self, compass_title):
        """Sets the compass_title of this InlineResponse20025DataCompassContent.


        :param compass_title: The compass_title of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and compass_title is None:  # noqa: E501
            raise ValueError("Invalid value for `compass_title`, must not be `None`")  # noqa: E501

        self._compass_title = compass_title

    @property
    def compass_asof_date(self):
        """Gets the compass_asof_date of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The compass_asof_date of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._compass_asof_date

    @compass_asof_date.setter
    def compass_asof_date(self, compass_asof_date):
        """Sets the compass_asof_date of this InlineResponse20025DataCompassContent.


        :param compass_asof_date: The compass_asof_date of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and compass_asof_date is None:  # noqa: E501
            raise ValueError("Invalid value for `compass_asof_date`, must not be `None`")  # noqa: E501

        self._compass_asof_date = compass_asof_date

    @property
    def executive_summary(self):
        """Gets the executive_summary of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The executive_summary of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._executive_summary

    @executive_summary.setter
    def executive_summary(self, executive_summary):
        """Sets the executive_summary of this InlineResponse20025DataCompassContent.


        :param executive_summary: The executive_summary of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and executive_summary is None:  # noqa: E501
            raise ValueError("Invalid value for `executive_summary`, must not be `None`")  # noqa: E501

        self._executive_summary = executive_summary

    @property
    def trending_up_article(self):
        """Gets the trending_up_article of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The trending_up_article of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._trending_up_article

    @trending_up_article.setter
    def trending_up_article(self, trending_up_article):
        """Sets the trending_up_article of this InlineResponse20025DataCompassContent.


        :param trending_up_article: The trending_up_article of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and trending_up_article is None:  # noqa: E501
            raise ValueError("Invalid value for `trending_up_article`, must not be `None`")  # noqa: E501

        self._trending_up_article = trending_up_article

    @property
    def trending_up_topics(self):
        """Gets the trending_up_topics of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The trending_up_topics of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._trending_up_topics

    @trending_up_topics.setter
    def trending_up_topics(self, trending_up_topics):
        """Sets the trending_up_topics of this InlineResponse20025DataCompassContent.


        :param trending_up_topics: The trending_up_topics of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and trending_up_topics is None:  # noqa: E501
            raise ValueError("Invalid value for `trending_up_topics`, must not be `None`")  # noqa: E501

        self._trending_up_topics = trending_up_topics

    @property
    def popularity_article(self):
        """Gets the popularity_article of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The popularity_article of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._popularity_article

    @popularity_article.setter
    def popularity_article(self, popularity_article):
        """Sets the popularity_article of this InlineResponse20025DataCompassContent.


        :param popularity_article: The popularity_article of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and popularity_article is None:  # noqa: E501
            raise ValueError("Invalid value for `popularity_article`, must not be `None`")  # noqa: E501

        self._popularity_article = popularity_article

    @property
    def popularity_topics(self):
        """Gets the popularity_topics of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The popularity_topics of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._popularity_topics

    @popularity_topics.setter
    def popularity_topics(self, popularity_topics):
        """Sets the popularity_topics of this InlineResponse20025DataCompassContent.


        :param popularity_topics: The popularity_topics of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and popularity_topics is None:  # noqa: E501
            raise ValueError("Invalid value for `popularity_topics`, must not be `None`")  # noqa: E501

        self._popularity_topics = popularity_topics

    @property
    def trending_down_article(self):
        """Gets the trending_down_article of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The trending_down_article of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._trending_down_article

    @trending_down_article.setter
    def trending_down_article(self, trending_down_article):
        """Sets the trending_down_article of this InlineResponse20025DataCompassContent.


        :param trending_down_article: The trending_down_article of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and trending_down_article is None:  # noqa: E501
            raise ValueError("Invalid value for `trending_down_article`, must not be `None`")  # noqa: E501

        self._trending_down_article = trending_down_article

    @property
    def trending_down_topics(self):
        """Gets the trending_down_topics of this InlineResponse20025DataCompassContent.  # noqa: E501


        :return: The trending_down_topics of this InlineResponse20025DataCompassContent.  # noqa: E501
        :rtype: str
        """
        return self._trending_down_topics

    @trending_down_topics.setter
    def trending_down_topics(self, trending_down_topics):
        """Sets the trending_down_topics of this InlineResponse20025DataCompassContent.


        :param trending_down_topics: The trending_down_topics of this InlineResponse20025DataCompassContent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and trending_down_topics is None:  # noqa: E501
            raise ValueError("Invalid value for `trending_down_topics`, must not be `None`")  # noqa: E501

        self._trending_down_topics = trending_down_topics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20025DataCompassContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20025DataCompassContent):
            return True

        return self.to_dict() != other.to_dict()
