# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from alphaiq_sdk.configuration import Configuration


class InlineResponse20013Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lvl4_industry_name': 'str',
        'lvl4_overallrisk_value': 'int',
        'overallrisk_change_4_w': 'int',
        'company_name': 'str',
        'lvl3_industry_name': 'str',
        'lvl2_overallrisk_value': 'int',
        'ticker': 'str',
        'cik': 'str',
        'as_of_date': 'str',
        'lvl2_industry_name': 'str',
        'lvl3_overallrisk_value': 'int',
        'entity_type': 'str',
        'overallrisk_value': 'int'
    }

    attribute_map = {
        'lvl4_industry_name': 'lvl4IndustryName',
        'lvl4_overallrisk_value': 'lvl4_OVERALLRISK-VALUE',
        'overallrisk_change_4_w': 'OVERALLRISK-CHANGE_4W',
        'company_name': 'companyName',
        'lvl3_industry_name': 'lvl3IndustryName',
        'lvl2_overallrisk_value': 'lvl2_OVERALLRISK-VALUE',
        'ticker': 'ticker',
        'cik': 'cik',
        'as_of_date': 'asOfDate',
        'lvl2_industry_name': 'lvl2IndustryName',
        'lvl3_overallrisk_value': 'lvl3_OVERALLRISK-VALUE',
        'entity_type': 'entityType',
        'overallrisk_value': 'OVERALLRISK-VALUE'
    }

    def __init__(self, lvl4_industry_name=None, lvl4_overallrisk_value=None, overallrisk_change_4_w=None, company_name=None, lvl3_industry_name=None, lvl2_overallrisk_value=None, ticker=None, cik=None, as_of_date=None, lvl2_industry_name=None, lvl3_overallrisk_value=None, entity_type=None, overallrisk_value=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse20013Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lvl4_industry_name = None
        self._lvl4_overallrisk_value = None
        self._overallrisk_change_4_w = None
        self._company_name = None
        self._lvl3_industry_name = None
        self._lvl2_overallrisk_value = None
        self._ticker = None
        self._cik = None
        self._as_of_date = None
        self._lvl2_industry_name = None
        self._lvl3_overallrisk_value = None
        self._entity_type = None
        self._overallrisk_value = None
        self.discriminator = None

        self.lvl4_industry_name = lvl4_industry_name
        self.lvl4_overallrisk_value = lvl4_overallrisk_value
        self.overallrisk_change_4_w = overallrisk_change_4_w
        self.company_name = company_name
        self.lvl3_industry_name = lvl3_industry_name
        self.lvl2_overallrisk_value = lvl2_overallrisk_value
        self.ticker = ticker
        self.cik = cik
        self.as_of_date = as_of_date
        self.lvl2_industry_name = lvl2_industry_name
        self.lvl3_overallrisk_value = lvl3_overallrisk_value
        self.entity_type = entity_type
        self.overallrisk_value = overallrisk_value

    @property
    def lvl4_industry_name(self):
        """Gets the lvl4_industry_name of this InlineResponse20013Data.  # noqa: E501


        :return: The lvl4_industry_name of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._lvl4_industry_name

    @lvl4_industry_name.setter
    def lvl4_industry_name(self, lvl4_industry_name):
        """Sets the lvl4_industry_name of this InlineResponse20013Data.


        :param lvl4_industry_name: The lvl4_industry_name of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and lvl4_industry_name is None:  # noqa: E501
            raise ValueError("Invalid value for `lvl4_industry_name`, must not be `None`")  # noqa: E501

        self._lvl4_industry_name = lvl4_industry_name

    @property
    def lvl4_overallrisk_value(self):
        """Gets the lvl4_overallrisk_value of this InlineResponse20013Data.  # noqa: E501


        :return: The lvl4_overallrisk_value of this InlineResponse20013Data.  # noqa: E501
        :rtype: int
        """
        return self._lvl4_overallrisk_value

    @lvl4_overallrisk_value.setter
    def lvl4_overallrisk_value(self, lvl4_overallrisk_value):
        """Sets the lvl4_overallrisk_value of this InlineResponse20013Data.


        :param lvl4_overallrisk_value: The lvl4_overallrisk_value of this InlineResponse20013Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and lvl4_overallrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `lvl4_overallrisk_value`, must not be `None`")  # noqa: E501

        self._lvl4_overallrisk_value = lvl4_overallrisk_value

    @property
    def overallrisk_change_4_w(self):
        """Gets the overallrisk_change_4_w of this InlineResponse20013Data.  # noqa: E501


        :return: The overallrisk_change_4_w of this InlineResponse20013Data.  # noqa: E501
        :rtype: int
        """
        return self._overallrisk_change_4_w

    @overallrisk_change_4_w.setter
    def overallrisk_change_4_w(self, overallrisk_change_4_w):
        """Sets the overallrisk_change_4_w of this InlineResponse20013Data.


        :param overallrisk_change_4_w: The overallrisk_change_4_w of this InlineResponse20013Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and overallrisk_change_4_w is None:  # noqa: E501
            raise ValueError("Invalid value for `overallrisk_change_4_w`, must not be `None`")  # noqa: E501

        self._overallrisk_change_4_w = overallrisk_change_4_w

    @property
    def company_name(self):
        """Gets the company_name of this InlineResponse20013Data.  # noqa: E501


        :return: The company_name of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this InlineResponse20013Data.


        :param company_name: The company_name of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and company_name is None:  # noqa: E501
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def lvl3_industry_name(self):
        """Gets the lvl3_industry_name of this InlineResponse20013Data.  # noqa: E501


        :return: The lvl3_industry_name of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._lvl3_industry_name

    @lvl3_industry_name.setter
    def lvl3_industry_name(self, lvl3_industry_name):
        """Sets the lvl3_industry_name of this InlineResponse20013Data.


        :param lvl3_industry_name: The lvl3_industry_name of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and lvl3_industry_name is None:  # noqa: E501
            raise ValueError("Invalid value for `lvl3_industry_name`, must not be `None`")  # noqa: E501

        self._lvl3_industry_name = lvl3_industry_name

    @property
    def lvl2_overallrisk_value(self):
        """Gets the lvl2_overallrisk_value of this InlineResponse20013Data.  # noqa: E501


        :return: The lvl2_overallrisk_value of this InlineResponse20013Data.  # noqa: E501
        :rtype: int
        """
        return self._lvl2_overallrisk_value

    @lvl2_overallrisk_value.setter
    def lvl2_overallrisk_value(self, lvl2_overallrisk_value):
        """Sets the lvl2_overallrisk_value of this InlineResponse20013Data.


        :param lvl2_overallrisk_value: The lvl2_overallrisk_value of this InlineResponse20013Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and lvl2_overallrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `lvl2_overallrisk_value`, must not be `None`")  # noqa: E501

        self._lvl2_overallrisk_value = lvl2_overallrisk_value

    @property
    def ticker(self):
        """Gets the ticker of this InlineResponse20013Data.  # noqa: E501


        :return: The ticker of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this InlineResponse20013Data.


        :param ticker: The ticker of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ticker is None:  # noqa: E501
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def cik(self):
        """Gets the cik of this InlineResponse20013Data.  # noqa: E501


        :return: The cik of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._cik

    @cik.setter
    def cik(self, cik):
        """Sets the cik of this InlineResponse20013Data.


        :param cik: The cik of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cik is None:  # noqa: E501
            raise ValueError("Invalid value for `cik`, must not be `None`")  # noqa: E501

        self._cik = cik

    @property
    def as_of_date(self):
        """Gets the as_of_date of this InlineResponse20013Data.  # noqa: E501


        :return: The as_of_date of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this InlineResponse20013Data.


        :param as_of_date: The as_of_date of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and as_of_date is None:  # noqa: E501
            raise ValueError("Invalid value for `as_of_date`, must not be `None`")  # noqa: E501

        self._as_of_date = as_of_date

    @property
    def lvl2_industry_name(self):
        """Gets the lvl2_industry_name of this InlineResponse20013Data.  # noqa: E501


        :return: The lvl2_industry_name of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._lvl2_industry_name

    @lvl2_industry_name.setter
    def lvl2_industry_name(self, lvl2_industry_name):
        """Sets the lvl2_industry_name of this InlineResponse20013Data.


        :param lvl2_industry_name: The lvl2_industry_name of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and lvl2_industry_name is None:  # noqa: E501
            raise ValueError("Invalid value for `lvl2_industry_name`, must not be `None`")  # noqa: E501

        self._lvl2_industry_name = lvl2_industry_name

    @property
    def lvl3_overallrisk_value(self):
        """Gets the lvl3_overallrisk_value of this InlineResponse20013Data.  # noqa: E501


        :return: The lvl3_overallrisk_value of this InlineResponse20013Data.  # noqa: E501
        :rtype: int
        """
        return self._lvl3_overallrisk_value

    @lvl3_overallrisk_value.setter
    def lvl3_overallrisk_value(self, lvl3_overallrisk_value):
        """Sets the lvl3_overallrisk_value of this InlineResponse20013Data.


        :param lvl3_overallrisk_value: The lvl3_overallrisk_value of this InlineResponse20013Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and lvl3_overallrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `lvl3_overallrisk_value`, must not be `None`")  # noqa: E501

        self._lvl3_overallrisk_value = lvl3_overallrisk_value

    @property
    def entity_type(self):
        """Gets the entity_type of this InlineResponse20013Data.  # noqa: E501


        :return: The entity_type of this InlineResponse20013Data.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this InlineResponse20013Data.


        :param entity_type: The entity_type of this InlineResponse20013Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and entity_type is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def overallrisk_value(self):
        """Gets the overallrisk_value of this InlineResponse20013Data.  # noqa: E501


        :return: The overallrisk_value of this InlineResponse20013Data.  # noqa: E501
        :rtype: int
        """
        return self._overallrisk_value

    @overallrisk_value.setter
    def overallrisk_value(self, overallrisk_value):
        """Sets the overallrisk_value of this InlineResponse20013Data.


        :param overallrisk_value: The overallrisk_value of this InlineResponse20013Data.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and overallrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `overallrisk_value`, must not be `None`")  # noqa: E501

        self._overallrisk_value = overallrisk_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20013Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20013Data):
            return True

        return self.to_dict() != other.to_dict()
