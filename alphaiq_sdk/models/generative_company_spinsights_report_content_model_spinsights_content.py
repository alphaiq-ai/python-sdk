# coding: utf-8

"""
    AlphaIQ API

    Quantitative Linguistics is the Future of Investment Research

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class GenerativeCompanySpinsightsReportContentModelSpinsightsContent(BaseModel):
    """
    GenerativeCompanySpinsightsReportContentModelSpinsightsContent
    """ # noqa: E501
    spinsights_title: StrictStr
    spinsights_asof_date: StrictStr
    spindex_summary: StrictStr
    final_article: StrictStr
    final_topics: StrictStr
    article_part1: StrictStr
    part1_topics: StrictStr
    article_part2: StrictStr
    part2_topics: StrictStr
    article_part3: StrictStr
    part3_topics: StrictStr
    __properties: ClassVar[List[str]] = ["spinsights_title", "spinsights_asof_date", "spindex_summary", "final_article", "final_topics", "article_part1", "part1_topics", "article_part2", "part2_topics", "article_part3", "part3_topics"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerativeCompanySpinsightsReportContentModelSpinsightsContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerativeCompanySpinsightsReportContentModelSpinsightsContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "spinsights_title": obj.get("spinsights_title"),
            "spinsights_asof_date": obj.get("spinsights_asof_date"),
            "spindex_summary": obj.get("spindex_summary"),
            "final_article": obj.get("final_article"),
            "final_topics": obj.get("final_topics"),
            "article_part1": obj.get("article_part1"),
            "part1_topics": obj.get("part1_topics"),
            "article_part2": obj.get("article_part2"),
            "part2_topics": obj.get("part2_topics"),
            "article_part3": obj.get("article_part3"),
            "part3_topics": obj.get("part3_topics")
        })
        return _obj


