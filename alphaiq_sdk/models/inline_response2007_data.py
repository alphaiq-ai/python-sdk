# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from alphaiq_sdk.configuration import Configuration


class InlineResponse2007Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'as_of_date': 'str',
        'industry': 'str',
        'high_risk_companies': 'list[InlineResponse2007DataHighRiskCompanies]'
    }

    attribute_map = {
        'as_of_date': 'asOfDate',
        'industry': 'industry',
        'high_risk_companies': 'highRiskCompanies'
    }

    def __init__(self, as_of_date=None, industry=None, high_risk_companies=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2007Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._as_of_date = None
        self._industry = None
        self._high_risk_companies = None
        self.discriminator = None

        self.as_of_date = as_of_date
        self.industry = industry
        self.high_risk_companies = high_risk_companies

    @property
    def as_of_date(self):
        """Gets the as_of_date of this InlineResponse2007Data.  # noqa: E501


        :return: The as_of_date of this InlineResponse2007Data.  # noqa: E501
        :rtype: str
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this InlineResponse2007Data.


        :param as_of_date: The as_of_date of this InlineResponse2007Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and as_of_date is None:  # noqa: E501
            raise ValueError("Invalid value for `as_of_date`, must not be `None`")  # noqa: E501

        self._as_of_date = as_of_date

    @property
    def industry(self):
        """Gets the industry of this InlineResponse2007Data.  # noqa: E501


        :return: The industry of this InlineResponse2007Data.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this InlineResponse2007Data.


        :param industry: The industry of this InlineResponse2007Data.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and industry is None:  # noqa: E501
            raise ValueError("Invalid value for `industry`, must not be `None`")  # noqa: E501

        self._industry = industry

    @property
    def high_risk_companies(self):
        """Gets the high_risk_companies of this InlineResponse2007Data.  # noqa: E501


        :return: The high_risk_companies of this InlineResponse2007Data.  # noqa: E501
        :rtype: list[InlineResponse2007DataHighRiskCompanies]
        """
        return self._high_risk_companies

    @high_risk_companies.setter
    def high_risk_companies(self, high_risk_companies):
        """Sets the high_risk_companies of this InlineResponse2007Data.


        :param high_risk_companies: The high_risk_companies of this InlineResponse2007Data.  # noqa: E501
        :type: list[InlineResponse2007DataHighRiskCompanies]
        """
        if self.local_vars_configuration.client_side_validation and high_risk_companies is None:  # noqa: E501
            raise ValueError("Invalid value for `high_risk_companies`, must not be `None`")  # noqa: E501

        self._high_risk_companies = high_risk_companies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2007Data):
            return True

        return self.to_dict() != other.to_dict()
