# coding: utf-8

"""
    AlphaIQ API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from alphaiq_sdk.configuration import Configuration


class InlineResponse2007DataHighRiskCompanies(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company_name': 'str',
        'lvl4_industry_name': 'str',
        'overallrisk_change_12_w': 'int',
        'overallrisk_value': 'int'
    }

    attribute_map = {
        'company_name': 'companyName',
        'lvl4_industry_name': 'lvl4IndustryName',
        'overallrisk_change_12_w': 'OVERALLRISK-CHANGE_12W',
        'overallrisk_value': 'OVERALLRISK-VALUE'
    }

    def __init__(self, company_name=None, lvl4_industry_name=None, overallrisk_change_12_w=None, overallrisk_value=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2007DataHighRiskCompanies - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._company_name = None
        self._lvl4_industry_name = None
        self._overallrisk_change_12_w = None
        self._overallrisk_value = None
        self.discriminator = None

        self.company_name = company_name
        self.lvl4_industry_name = lvl4_industry_name
        self.overallrisk_change_12_w = overallrisk_change_12_w
        self.overallrisk_value = overallrisk_value

    @property
    def company_name(self):
        """Gets the company_name of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501


        :return: The company_name of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this InlineResponse2007DataHighRiskCompanies.


        :param company_name: The company_name of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and company_name is None:  # noqa: E501
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def lvl4_industry_name(self):
        """Gets the lvl4_industry_name of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501


        :return: The lvl4_industry_name of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501
        :rtype: str
        """
        return self._lvl4_industry_name

    @lvl4_industry_name.setter
    def lvl4_industry_name(self, lvl4_industry_name):
        """Sets the lvl4_industry_name of this InlineResponse2007DataHighRiskCompanies.


        :param lvl4_industry_name: The lvl4_industry_name of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and lvl4_industry_name is None:  # noqa: E501
            raise ValueError("Invalid value for `lvl4_industry_name`, must not be `None`")  # noqa: E501

        self._lvl4_industry_name = lvl4_industry_name

    @property
    def overallrisk_change_12_w(self):
        """Gets the overallrisk_change_12_w of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501


        :return: The overallrisk_change_12_w of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501
        :rtype: int
        """
        return self._overallrisk_change_12_w

    @overallrisk_change_12_w.setter
    def overallrisk_change_12_w(self, overallrisk_change_12_w):
        """Sets the overallrisk_change_12_w of this InlineResponse2007DataHighRiskCompanies.


        :param overallrisk_change_12_w: The overallrisk_change_12_w of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and overallrisk_change_12_w is None:  # noqa: E501
            raise ValueError("Invalid value for `overallrisk_change_12_w`, must not be `None`")  # noqa: E501

        self._overallrisk_change_12_w = overallrisk_change_12_w

    @property
    def overallrisk_value(self):
        """Gets the overallrisk_value of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501


        :return: The overallrisk_value of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501
        :rtype: int
        """
        return self._overallrisk_value

    @overallrisk_value.setter
    def overallrisk_value(self, overallrisk_value):
        """Sets the overallrisk_value of this InlineResponse2007DataHighRiskCompanies.


        :param overallrisk_value: The overallrisk_value of this InlineResponse2007DataHighRiskCompanies.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and overallrisk_value is None:  # noqa: E501
            raise ValueError("Invalid value for `overallrisk_value`, must not be `None`")  # noqa: E501

        self._overallrisk_value = overallrisk_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007DataHighRiskCompanies):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2007DataHighRiskCompanies):
            return True

        return self.to_dict() != other.to_dict()
